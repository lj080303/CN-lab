import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.dataset import fetch_lfw_people
from sklearn.metrics import classification_report
from sklearn.decompostion import PCA
from sklearn.neural_network import MLPClassifier
lfw_dataset=fetch_lfw_people(min_faces_per_person=100),h,w=lfw_dataset.image.shape
x=lfw_dataset.data
y=lfw_dataset.target
target_names=lfw_dataset.target_names
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)
n_components=100
pca=PCA(n_components=n_components,whiten=True).fit(x_train)
x_train_pca=pca.transform(x_train)
x_test_pca=pca.transform(x_test)
print("Fitting the classifier to the training set")
clf=MLPClasifier(hidden_layer_sizes=(1024,).batch_size=256,verbose=True,early_stopping=True).fit(x_train_pca,y_train)
y_pred=clf.predict(x_test_pca)
print(classifion_report(y_test,y_pred,traget_names=traget_names))
def plot_gallery(images,tites,h,w,rows=3,cols=4):
plt.figure()
for i in range(rows*cols):
plt.subplot(rows,cols,i+1)
plt.imshow(images[i].reshape((h,w)),cmap=plt.cm.gray)
plt.title(title[i])
plt.xticks(())
plt.yticks(())
def titles(y_pred,y_test,traget_names):
for i in range(y_pred.shape[0]):
pred_name=target_names[y_pred[i]].split('')[-1]
true_name=target_names[y_test[i]].split('')[-1]
yield 'predicted:{0}\ntrue:{1}'.format(pred_name,true_name)
prediction_titles=list(titles(y_pred,y_test,target_names))
plot_gallery(x_test,prediction_titles,h,w)
plt.show()